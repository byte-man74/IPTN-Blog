generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Models --

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  image         String?
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)
  isActive      Boolean   @default(false) // Default inactive as requested
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  news          News[]
  comments      Comment[]

  @@index([id])
  @@index([email])
  @@index([lastName, firstName])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model News {
  id             String   @id @default(cuid())
  title          String
  summary        String?
  slug           String   @unique
  pubDate        DateTime?
  coverImage     String?
  createdAt      DateTime @default(now())
  lastUpdated    DateTime @updatedAt
  contentEncoded String?  @db.Text
  authorId       String?
  published      Boolean  @default(false)

  author     User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  categories Category[] @relation("NewsCategories")
  tags       Tag[]      @relation("NewsTags")
  analytics  Analytics?
  comments   Comment[]
  seo        Seo?

  @@index([id])
  @@index([authorId])
  @@index([slug])
  @@index([pubDate])
  @@index([published])
}

model Category {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  news        News[]   @relation("NewsCategories")

  @@index([id])
  @@index([slug])
  @@index([name])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news News[] @relation("NewsTags")

  @@index([id])
  @@index([name])
}

model Analytics {
  id        Int      @id @default(autoincrement())
  newsId    String   @unique
  likes     Int      @default(0)
  views     Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
  @@index([views])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  newsId      String
  isAnonymous Boolean  @default(false)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  news News  @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
  @@index([userId])
  @@index([createdAt])
}

model Seo {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?  @db.Text
  keywords       String?
  openGraphImage String?
  canonicalUrl   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  newsId String?  @unique
  news   News? @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
}
