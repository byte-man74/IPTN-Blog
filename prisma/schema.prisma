generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models --

model User {
  id         String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  news     News[]
  comments Comment[]

  @@index([id])
  @@index([email])
  @@index([lastName, firstName])
}

model News {
  id         String   @id @default(cuid())
  title          String
  summary        String?
  slug           String   @unique
  pubDate        DateTime
  createdAt      DateTime @default(now())
  lastUpdated    DateTime @updatedAt
  contentEncoded String?  @db.Text
  authorId       String
  published      Boolean  @default(false)

  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories Category[] @relation("NewsCategories")
  tags       Tag[]      @relation("NewsTags")
  analytics  Analytics?
  comments   Comment[]
  seo        Seo?

  @@index([id])
  @@index([authorId])
  @@index([slug])
  @@index([pubDate])
  @@index([published])
}

model Category {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  news        News[]   @relation("NewsCategories")

  @@index([id])
  @@index([slug])
  @@index([name])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news News[] @relation("NewsTags")

  @@index([id])
  @@index([name])
}

model Analytics {
  id        Int      @id @default(autoincrement())
  newsId    String   @unique
  likes     Int      @default(0)
  views     Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
  @@index([views])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  newsId      String
  isAnonymous Boolean  @default(false)

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  news News  @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
  @@index([userId])
  @@index([createdAt])
}

model Seo {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?  @db.Text
  keywords       String?
  openGraphImage String?
  canonicalUrl   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  newsId String?  @unique
  news   News? @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
}
