generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models --

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  image         String?
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)
  isActive      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  news          News[]
  comments      Comment[]
  polls         Poll[]
  votes         Vote[]

  @@index([id])
  @@index([email])
  @@index([lastName, firstName])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model News {
  id             String     @id @default(cuid())
  title          String
  summary        String?
  slug           String     @unique
  pubDate        DateTime?
  coverImage     String?
  createdAt      DateTime   @default(now())
  lastUpdated    DateTime   @updatedAt
  contentEncoded String?    @db.Text
  authorId       String?
  published      Boolean    @default(false)
  author         User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  categories     Category[] @relation("NewsCategories")
  tags           Tag[]      @relation("NewsTags")
  analytics      Analytics?
  comments       Comment[]
  advertisements Advertisement[]
  seo            Seo?

  @@index([id])
  @@index([authorId])
  @@index([slug])
  @@index([pubDate])
  @@index([published])
}

model Category {
  id                  Int               @id @default(autoincrement())
  slug                String            @unique
  name                String
  description         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  news                News[]            @relation("NewsCategories")
  navBarKeyCategories SiteConfiguration[] @relation("NavBarKeyCategories")
  navBarSubCategories SiteConfiguration[] @relation("NavBarSubCategories")

  @@index([id])
  @@index([slug])
  @@index([name])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  news      News[]   @relation("NewsTags")

  @@index([id])
  @@index([name])
}


model SiteConfiguration {
  id                  Int               @id @default(autoincrement())
  navBarKeyCategories Category[]        @relation("NavBarKeyCategories")
  navBarSubCategories Category[]        @relation("NavBarSubCategories")
}

model Analytics {
  id           Int      @id @default(autoincrement())
  newsId       String   @unique
  readDuration String?
  likes        Int      @default(0)
  views        Int      @default(0)
  shares       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  news         News     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
  @@index([views])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  newsId      String
  isAnonymous Boolean  @default(false)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  news        News     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([newsId])
  @@index([userId])
  @@index([createdAt])
}

model Seo {
  id              String   @id @default(cuid())
  newsId          String   @unique
  openGraphImage  String?  @db.Text
  twitterImage    String?  @db.Text
  metaTitle       String?  @db.Text
  metaDescription String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  news            News     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([newsId])
}


enum AdPosition {
  HOME
  NAV
  SECOND
  THIRD
  FOURTH
}

model Advertisement {
  id           String      @id @default(cuid())
  mediaUrl     String
  thumbnail    String
  title        String
  description  String?
  link         String?
  isActive     Boolean     @default(true)
  position     AdPosition  @default(HOME)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

    newsId     String?
    news       News? @relation(fields: [newsId], references: [id])

}


//polls


model Poll {
  id          Int       @id @default(autoincrement())
  title       String
  description String?   @db.Text
  status      String    @default("active") // active, closed, draft
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startDate   DateTime  @default(now())
  endDate     DateTime?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  options     Option[]
  votes       Vote[]

  @@index([id])
  @@index([status])
  @@index([userId])
}
model Option {
  id        Int      @id @default(autoincrement())
  text      String
  pollId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     Vote[]

  @@index([id])
  @@index([pollId])
}

model Vote {
  id        Int      @id @default(autoincrement())
  pollId    Int
  optionId  Int
  userId    String?
  createdAt DateTime @default(now())
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([pollId, userId])
  @@index([pollId])
  @@index([optionId])
  @@index([userId])
}
